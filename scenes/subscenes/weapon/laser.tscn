[gd_scene load_steps=2 format=3 uid="uid://bk2b50tl11to3"]

[sub_resource type="CSharpScript" id="CSharpScript_h7rs5"]
script/source = "using System.Collections.Generic;
using BitBuster.data;
using BitBuster.utils;
using Godot;

namespace BitBuster.projectile;

public partial class Laser : Node2D
{

	private Line2D _line;
	private RayCast2D _laser;
	private GpuParticles2D _particles;
	
	private List<RayCast2D> _lasers;

	private AttackData _attackData;
	private int _remainingBounces;
	private float _hueShift;
	private Vector2 _castTo;
	private float _rotation;
	
	public override void _Notification(int what)
	{
		if (what != NotificationSceneInstantiated) 
			return;
		
		_line = GetNode<Line2D>(\"Line2D\");
		_laser = GetNode<RayCast2D>(\"Laser\");
		_particles = GetNode<GpuParticles2D>(\"End\");
		
		_lasers = new List<RayCast2D>();

		_laser.GetCollider();
	}

	public override void _Process(double delta)
	{
		
		_line.ClearPoints();
		_line.AddPoint(GlobalPosition);

		_castTo = new Vector2(320, 0).Rotated(_rotation);

		foreach (RayCast2D laser in _lasers)
		{
			laser.TargetPosition = _castTo;

			Vector2 collisionLoc = laser.GetCollisionPoint();

			if (laser.IsColliding())
			{
				_line.AddPoint(collisionLoc);

				
				var collider = laser.GetCollider();
				Logger.Log.Information(collider.GetClass());
				
				_castTo = _castTo.Bounce(laser.GetCollisionNormal());

				laser.Enabled = true;
				laser.GlobalPosition = collisionLoc + 1 * _castTo.Normalized();
			}
		}

	}

	public void SetTrajectory(Vector2 position, float rotation, AttackData attackData)
	{
		GlobalPosition = position;
		_rotation = rotation;
		
		_remainingBounces = attackData.Bounces;
		_hueShift = 0.33f / attackData.Bounces;
		
		// _line.Modulate = Color.FromHsv(_remainingBounces * _hueShift, 1.0f, 1.0f);

		_attackData = attackData;
		
		_laser.SetCollisionMaskValue(2, false);
		_lasers.Add(_laser);

		for (int i = 0; i < _remainingBounces; i++)
		{
			RayCast2D newRay = _laser.Duplicate() as RayCast2D;
			newRay.Enabled = false;
			newRay.SetCollisionMaskValue(2, true);
			AddChild(newRay);
			_lasers.Add(newRay);
		}
	}

}
"

[node name="Laser" type="Node2D"]
script = SubResource("CSharpScript_h7rs5")

[node name="Laser" type="RayCast2D" parent="."]
top_level = true
collision_mask = 29

[node name="Line2D" type="Line2D" parent="."]

[node name="End" type="GPUParticles2D" parent="."]
